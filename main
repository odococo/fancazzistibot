#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Simple Bot to reply to Telegram messages
# This program is dedicated to the public domain under the CC0 license.
"""
This Bot uses the Updater class to handle the bot.
First, a few handler functions are defined. Then, those functions are passed to
the Dispatcher and registered at their respective places.
Then, the bot is started and runs until we press Ctrl-C on the command line.
Usage:
Basic Echobot example, repeats messages.
Press Ctrl-C on the command line or send a signal to the process to stop the
bot.
"""

import logging
import os
import re
import sys

import telegram
from telegram.ext import (
    Updater,
    MessageHandler,
    RegexHandler,
    Filters,
    CallbackQueryHandler,
    TypeHandler
)

from bot_classes import Loot, Boss
from comandi import new_command
from db_call import add_user, add_bot, get_users, delete_user
from utils import ( is_numeric, grant_deny_access)

#==================GLOBAL VARIABLES==========================================
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.DEBUG)
logger = logging.getLogger(__name__)

PORT = int(os.environ.get('PORT', '5000'))




#==================FUNCTIONS==========================================

def get_token_bot(dev):
    if dev:
        id = "333089594"
        token = id + ":AAFossfi9mGnY648Eb5mv3wKO0NbHedrXq0"
    else:
        id = "490902479"
        token = id + ":AAGz3rv4M2U2dYG7WJDbiWZoAFFsUVn_ZIE"
    return token

def get_user(user):
    user = {
        'id': user.id,
        'username': getattr(user, 'username', None),
        'first_name': getattr(user, 'first_name', None),
        'last_name': getattr(user, 'last_name', None),
        'language_code': getattr(user, 'language_code', None),
    }
    return user

def get_bot(bot):
    return get_user(bot)

def get_info(bot, update):
    user = get_user(update.message.from_user)
    bot_id, sep, actual_token = bot.token.partition(':')
    add_user(user, int(bot_id))
    if re.search("^[.!/]", update.message.text):
        pass
        #non possibile sull'hosting attuale
        #track_activity.command(bot, update) 
    elif Filters.all(update.message):
        pass
        #non possibile sull'hosting attuale
        #track_activity.text(bot, update)

def button(bot, update):
    query = update.callback_query
    bot.edit_message_text(text="Selected option: %s" % query.data,
                          chat_id=query.message.chat_id,
                          message_id=query.message.message_id)


def alarm(bot, job):
    """Function to send the alarm message"""
    bot.send_message(job.context, text='Beep!')
    
def set(bot, update, args, job_queue, chat_data):
    """Adds a job to the queue"""
    chat_id = update.message.chat_id
    #print(chat_id)
    try:
      # args[0] should contain the time for the timer in seconds
      due = int(args[0])
      if due < 0:
          update.message.reply_text('Sorry we can not go back to future!')
          return

      # Add job to queue
      job = job_queue.run_once(alarm, due, context=chat_id)
      chat_data['job'] = job

      update.message.reply_text('Timer successfully set!')

    except (IndexError, ValueError):
      update.message.reply_text('Usage: /set <seconds>')
      
def unset(bot, update, chat_data):
    """Removes the job if the user changed their mind"""

    if 'job' not in chat_data:
        update.message.reply_text('You have no active timer')
        return

    job = chat_data['job']
    job.schedule_removal()
    del chat_data['job']

    update.message.reply_text('Timer successfully unset!')

def error(bot, update, error):
    logger.warning('Update "%s" caused error "%s"' % (update, error))

def log_update(bot, update):
    logger.info(update)


#==================MAIN==========================================


def main():
    # Create the EventHandler and pass it your bot's token.
    mode = int(sys.argv[1]) if len(sys.argv) > 1 and is_numeric(sys.argv[1]) else 0
    """
    python3 main oppure python3 main 0 fanno partire il bot principale
    python3 main 1 il bot dev
    python3 main 2 il bot principale in polling
    python3 main 3 il bot dev in polling
    """
    #mode=3
    dev = mode % 2 != 0
    debug = mode // 2 == 1
    updater = Updater(get_token_bot(dev))
    logger.info("Modalit√† di avvio: {}\nDev = {}\nDebug = {}\nbot = {}".format(mode, dev, debug, updater.bot))
    add_bot(get_bot(updater.bot))

# Get the dispatcher to register handlers
    disp = updater.dispatcher

    # Handler to get username and other info
    disp.add_handler(MessageHandler(Filters.all, get_info), -1)
    disp.add_handler(TypeHandler(telegram.Update, log_update), -1)


    users_lst=get_users()
    """lista di dizionari del con le seguenti chiavi:
    id
    username
    first_name
    last_name
    language_code
    date
    """
    if not users_lst: users_lst=[]

    #resetto il database
    for elem in users_lst:
        delete_user(elem)

    #classi per craftlootbot e comandi boss
    Loot(updater.bot, disp, users_lst)
    Boss(updater.bot, disp)

    #handler per richiedere accesso al bot
    disp.add_handler(CallbackQueryHandler(grant_deny_access, pattern="/consentiAccesso"))





    disp.add_handler(RegexHandler("^[.!/]", new_command))





    disp.add_handler(CallbackQueryHandler(new_command, pattern="^[/.!]dice"))
    
    # log all errors
    disp.add_error_handler(error)

    # Start the Bot
    if debug: updater.start_polling()
    else:
        updater.start_webhook(listen="0.0.0.0",
                          port=PORT,
                          url_path="main")
        updater.bot.set_webhook("https://fancazzistibot.herokuapp.com/main")

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    main()
