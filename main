#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Simple Bot to reply to Telegram messages
# This program is dedicated to the public domain under the CC0 license.
"""
This Bot uses the Updater class to handle the bot.
First, a few handler functions are defined. Then, those functions are passed to
the Dispatcher and registered at their respective places.
Then, the bot is started and runs until we press Ctrl-C on the command line.
Usage:
Basic Echobot example, repeats messages.
Press Ctrl-C on the command line or send a signal to the process to stop the
bot.
"""
import codecs
import logging
import sys

import telegram
from telegram.ext import (
    Updater)

from bot_classes import *
from comandi import new_command, videos
from db_call import DB, developer_dicts
from utils import (is_numeric, get_pretty_json)

# ==================GLOBAL VARIABLES==========================================
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

PORT = int(os.environ.get('PORT', '5000'))

# ==================FUNCTIONS==========================================
bot_ids = [333089594, 490902479]


def get_bot_id(dev):
    if dev:
        id = 333089594
    else:
        id = 490902479
    return id


def get_user(user):
    user = {
        'id': user.id,
        'username': getattr(user, 'username', None),
        'first_name': getattr(user, 'first_name', None),
        'last_name': getattr(user, 'last_name', None),
        'language_code': getattr(user, 'language_code', None),
    }
    return user


def get_bot(bot):
    return get_user(bot)


# def get_info(bot, update):
#     user = get_user(update.message.from_user)
#     bot_id, sep, actual_token = bot.token.partition(':')
#     add_user(user, int(bot_id))
#     if re.search("^[.!/]", update.message.text):
#         pass
#         #non possibile sull'hosting attuale
#         #track_activity.command(bot, update)
#     elif Filters.all(update.message):
#         pass
#         #non possibile sull'hosting attuale
#         #track_activity.text(bot, update)

def button(bot, update):
    query = update.callback_query
    bot.edit_message_text(text="Selected option: %s" % query.data,
                          chat_id=query.message.chat_id,
                          message_id=query.message.message_id)


def alarm(bot, job):
    """Function to send the alarm message"""
    bot.send_message(job.context, text='Beep!')


def set(bot, update, args, job_queue, chat_data):
    """Adds a job to the queue"""
    chat_id = update.message.chat_id
    # print(chat_id)
    try:
        # args[0] should contain the time for the timer in seconds
        due = int(args[0])
        if due < 0:
            update.message.reply_text('Sorry we can not go back to future!')
            return

        # Add job to queue
        job = job_queue.run_once(alarm, due, context=chat_id)
        chat_data['job'] = job

        update.message.reply_text('Timer successfully set!')

    except (IndexError, ValueError):
        update.message.reply_text('Usage: /set <seconds>')


def unset(bot, update, chat_data):
    """Removes the job if the user changed their mind"""

    if 'job' not in chat_data:
        update.message.reply_text('You have no active timer')
        return

    job = chat_data['job']
    job.schedule_removal()
    del chat_data['job']

    update.message.reply_text('Timer successfully unset!')


def basta_stikers(bot, update):
    sender = update.message.from_user
    to_send = ["Ma basta con sti sticker cancerogeni", "Ancora?! facciamola finita con questi stickers",
               "Un altro sticker? regolati perfavore"]
    if "Vyllain" in sender['username']:
        update.message.reply_text(random.choice(to_send), reply_to_message_id=update.message.message_id)


def error(bot, update, error):
    try:
        raise error
    except telegram.error.Unauthorized:
        for val in developer_dicts.values():
            bot.send_message(val, "Unauthorized Error!")
            bot.send_message(val, str(error))

            bot.send_message(val, get_pretty_json(str(update)))
            bot.send_message(val, str(bot))

    except telegram.error.BadRequest:
        if "Message is not modified" in str(error): return
        for val in developer_dicts.values():
            bot.send_message(val, "BadRequest Error!")
            bot.send_message(val, str(error))

            bot.send_message(val, get_pretty_json(str(update)))
            bot.send_message(val, str(bot))
    except telegram.error.TimedOut:
        for val in developer_dicts.values():
            bot.send_message(val, "TimedOut Error!")
            bot.send_message(val, str(error))

            bot.send_message(val, get_pretty_json(str(update)))
            bot.send_message(val, str(bot))
            # handle slow connection problems
    except telegram.error.NetworkError:
        for val in developer_dicts.values():
            bot.send_message(val, "NetworkError Error!")
            bot.send_message(val, str(error))

            bot.send_message(val, get_pretty_json(str(update)))
            bot.send_message(val, str(bot))
    except telegram.error.ChatMigrated as e:
        for val in developer_dicts.values():
            bot.send_message(val, "NetworkError Error!")
            bot.send_message(val, str(error))
            bot.send_message(val, get_pretty_json(str(update)))
            bot.send_message(val, str(bot))
    except telegram.error.TelegramError:
        for val in developer_dicts.values():
            bot.send_message(val, "TelegramError Error!")
            bot.send_message(val, str(error))
            bot.send_message(val, get_pretty_json(str(update)))
            bot.send_message(val, str(bot))
            bot.send_message(val, str(error))
    logger.warning('Update "%s" caused error "%s"' % (update, error))


def log_update(bot, update):
    logger.info(update)


def video_reciver(bot, update):
    if "private" in update.message.chat.type:
        update.message.reply_text("id video = " + str(update.message.video))


def photo_reciver(bot, update):
    if "private" in update.message.chat.type:
        update.message.reply_text("id image = " + str(update.message.photo[0].file_id))


def sticker_reciver(bot, update):
    if "private" in update.message.chat.type:
        update.message.reply_text("id stiker = <code>" + str(update.message.sticker.file_id) + "</code>",
                                  parse_mode="HTML")


def send_help_video(bot, update):
    """Manda il video di help"""
    video = update.callback_query.data.split()[1]
    bot.delete_message(
        chat_id=update.callback_query.message.chat_id,
        message_id=update.callback_query.message.message_id
    )
    bot.sendVideo(update.callback_query.message.chat_id, videos[video][1])


# ==================MAIN==========================================

def admin_supremo(bot, update):
    to_send = ["Zi padrone...come lei gomanda", "Yes master!", "Hai! sempai onii-chan"]
    if "supergroup" in update.message.chat.type:
        if update.message.reply_to_message.from_user.id == 490902479:
            if update.message.from_user.id == 24978334:
                update.message.reply_text(random.choice(to_send))


def send_stiker(bot, update):
    if "supergroup" in update.message.chat.type:
        if update.message.from_user.id == 24978334:
            bot.sendSticker(update.message.chat_id, update.message.text.split()[1])

def Uganda(bot, update):
    if "supergroup" in update.message.chat.type:
        to_send=["Do u know de wey?","I can show u de wey of de devil","Click Click Click Click Click Click Click",
                 "its never gay if its in zimbabwe", "in zimbabwe we do not have water",
                 "i will teach u de wey, de wey of de devil", "show us de wey commander!",
                 "spit on de fake queen"]
        update.message.reply_text(random.choice(to_send))


def main():
    # Create the EventHandler and pass it your bot's token.
    mode = int(sys.argv[1]) if len(sys.argv) > 1 and is_numeric(sys.argv[1]) else 0
    """
    python3 main oppure python3 main 0 fanno partire il bot principale
    python3 main 1 il bot dev
    python3 main 2 il bot principale in polling
    python3 main 3 il bot dev in polling 
    """

    db = DB()  # database

    # mode=3
    dev = mode % 2 != 0
    debug = mode // 2 == 1
    bot_id = get_bot_id(dev)
    token = str(bot_id) + db.get_token(bot_id)['token']
    # token=str(bot_id)+""
    updater = Updater(token)
    logger.info("Modalit√† di avvio: {}\nDev = {}\nDebug = {}\nbot = {}".format(mode, dev, debug, updater.bot))
    # add_bot(get_bot(updater.bot))

    # Get the dispatcher to register handlers
    disp = updater.dispatcher

    # Handler to get username and other info
    # disp.add_handler(MessageHandler(Filters.all, get_info), -1)
    # disp.add_handler(TypeHandler(telegram.Update, log_update), -1)

    #
    # users=db.get_id_users()
    # if not isinstance(users, list):users=[users]
    #
    #
    #
    #
    # #manda una notifica a tutti gli utenti
    # for elem in users:
    #     if not elem["id"] in bot_ids:
    #         updater.bot.send_message(elem["id"],"",reply_markup=ReplyKeyboardRemove())

    disp.add_handler(MessageHandler(Filters.video, video_reciver))
    disp.add_handler(CommandHandler("sendsticker", send_stiker))
    disp.add_handler(CommandHandler("uganda", Uganda))
    disp.add_handler(MessageHandler(Filters.photo, photo_reciver))
    disp.add_handler(MessageHandler(Filters.sticker, sticker_reciver))
    disp.add_handler(MessageHandler(Filters.reply, admin_supremo))
    disp.add_handler(MessageHandler(Filters.sticker and Filters.document, sticker_reciver))
    disp.add_handler(CallbackQueryHandler(send_help_video, pattern="/helpvideo"))

    with codecs.open("craftables_file", encoding='utf-8') as file:
        rea = file.read()
        oggetti = eval(rea.replace("null", "None"))

    with codecs.open("base_file", encoding='utf-8') as file:
        rea = file.read()
        base_items = eval(rea.replace("null", "None"))

    # classi per craftlootbot e comandi boss

    Loot(updater, db)
    Boss(updater, db)
    Cerca(updater, db, oggetti)
    Compra(updater, db)
    # EasterEggs(updater)
    Top(updater, db)
    PietreDrago(updater, db)
    Help(updater, db)
    Team(updater, db)
    # Contest(updater)
    Crafter(updater, db)
    Mancanti(updater, db, base_items)
    DiffSchede(updater, db)
    Alarm(updater,db)

    # handler per richiedere accesso al bot
    disp.add_handler(CallbackQueryHandler(db.grant_deny_access, pattern="/consentiAccesso"))

    disp.add_handler(RegexHandler("^[.!/]", new_command))

    disp.add_handler(CallbackQueryHandler(new_command, pattern="^[/.!]dice"))
    # disp.add_handler(MessageHandler(Filters.sticker,basta_stikers))

    # log all errors
    disp.add_error_handler(error)

    # Start the Bot
    if debug:
        updater.start_polling()
    else:
        updater.start_webhook(listen="0.0.0.0",
                              port=PORT,
                              url_path="main")
        updater.bot.set_webhook("https://fancazzistibot.herokuapp.com/main")

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    main()
